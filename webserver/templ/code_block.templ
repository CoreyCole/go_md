package templ

import (
	"bytes"
	"html/template"

	"github.com/alecthomas/chroma"
	"github.com/alecthomas/chroma/formatters/html"
	"github.com/alecthomas/chroma/lexers"
	"github.com/alecthomas/chroma/styles"
)

// CodeBlock component renders a code snippet with syntax highlighting.
templ CodeBlock(code, lang string) string {
	// Get the lexer for the language.
	lexer := lexers.Get(lang)
	if lexer == nil {
		lexer = lexers.Fallback
	}
	lexer = chroma.Coalesce(lexer)

	// Create an iterator for the tokens.
	iterator, err := lexer.Tokenise(nil, code)
	if err != nil {
		return "<div>Error tokenizing code</div>"
	}

	// Choose a style with a dark background.
	style := styles.Get("monokai")
	if style == nil {
		style = styles.Fallback
	}

	// Create a formatter with the desired options.
	formatter := html.New(html.WithClasses(true), html.WithLineNumbers(true))

	// Format the tokens into a buffer.
	var buf bytes.Buffer
	err = formatter.Format(&buf, style, iterator)
	if err != nil {
		return "<div>Error formatting code</div>"
	}

	// Return the buffer's content as a safe HTML string.
	return template.HTML(buf.String()).String()
}

templ Hello(name string) {
	<div>Hello, {name}</div>
}

templ Greeting(person Person, codeSnippet, language string) {
	<div class="greeting">
		@Hello(person.Name)
		// Render the code block with syntax highlighting.
		<pre class="chroma">@CodeBlock(codeSnippet, language)</pre>
	</div>
}
